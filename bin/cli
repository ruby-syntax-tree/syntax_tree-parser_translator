#!/usr/bin/env ruby
# frozen_string_literal: true

$:.unshift(File.expand_path("../syntax_tree/lib", __dir__))
require "syntax_tree/parser_translator"

def tree_diff(left, right)
  return if left == right

  if left.is_a?(String) && right.is_a?(String)
    raise "Expected #{left.inspect} but got #{right.inspect}"
  end

  if left.nil? && !right.nil?
    raise "left is nil, right is #{right.inspect}"
  end

  if !left.nil? && right.nil?
    raise "left is #{left.inspect}, right is nil"
  end

  if left.type != right.type
    raise "Expected #{left.type} but got #{right.type}"
  end

  if left.children.length != right.children.length
    raise "Expected #{left.children.length} children but got #{right.children.length}"
  end

  left.children.zip(right.children).each do |(left_child, right_child)|
    tree_diff(left_child, right_child)
  end
end

def test_snippet(source)
  stree_ast = -> { SyntaxTree.parse(source).to_parser }
  parser_ast = -> { Parser::CurrentRuby.parse(source) }

  stree_val = stree_ast.call
  parser_val = parser_ast.call

  begin
    tree_diff(stree_val, parser_val)
  rescue => error
    warn(error.message)
    warn("Expected #{stree_val.inspect} but got #{parser_val.inspect}")
    exit(1)
  else
    pp stree_val
  end

  Benchmark.ips do |x|
    x.report("stree", &stree_ast)
    x.report("parser", &parser_ast)
    x.compare!
  end
end

def test_all
  delimiter = /%(?: # (.+?))?\n/
  counts = { pass: 0, fail: 0}

  Dir[File.expand_path("../syntax_tree/test/fixtures/*.rb", __dir__)].each do |filepath|
    File.readlines(filepath).slice_before(delimiter).each.with_index(1) do |source, index|
      value, = source.tap(&:shift).join.split("-\n")
      key =
        begin
          tree_diff(SyntaxTree.parse(value).to_parser, Parser::CurrentRuby.parse(value))
        rescue => error
          warn("=== Failure on #{File.basename(filepath)} example #{index} ===")
          warn(error.message)
          :fail
        else
          :pass
        end

      counts[key] += 1
    end
  end

  pp counts
end

# test_snippet(<<~RUBY)
#   def foo(*)
#   end
# RUBY
# test_snippet(File.read(__FILE__))
test_all
